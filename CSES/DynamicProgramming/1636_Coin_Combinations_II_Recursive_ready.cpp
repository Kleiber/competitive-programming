/**
*  Generated by tpp tool
*  File: 1636_Coin_Combinations_II_Recursive.cpp
*  Created: 29-02-2024 18:48:51
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int MOD = 1e9+7;
 
int N, X;
vector<int> C;
vector<vector<int>> dp;
 
bool order(int a, int b) {
  return a > b;
}
 
int solve(int pos, int amount) {
  if(pos == N) return 0;
  if(amount == 0) return 1;
  if(dp[pos][amount] != -1) return dp[pos][amount];
 
  dp[pos][amount] = 0;
  
  if(amount >= C[pos]) {
    dp[pos][amount] = (dp[pos][amount] + solve(pos, amount - C[pos])) % MOD;
  }
  dp[pos][amount] = (dp[pos][amount] + solve(pos + 1, amount)) % MOD;
 
  return dp[pos][amount];
}
 
int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);
 
    cin>>N>>X;
 
    C = vector<int>(N);
    dp = vector<vector<int>> (N, vector<int>(X + 1, -1));
 
    for(int i = 0; i < N; i++) cin>>C[i];
 
    sort(C.begin(), C.end(), order);
 
    cout<<solve(0, X)<<endl;
 
    return 0;
}

