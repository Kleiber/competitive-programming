/**
*  Generated by tpp tool
*  File: 1666_Building_Roads.cpp
*  Created: 21-10-2024 13:26:26
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int MAX = 1e5 + 5;

vector<int> graph[MAX];
bool visited[MAX];

void dfs(int u) {
  visited[u] = 1;

  for(int v: graph[u]) {
    if(!visited[v]) dfs(v);
  }
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n, m;
    cin>>n>>m;

    for(int i = 0; i < m; i++) {
      int a, b;
      cin>>a>>b;

      graph[a].push_back(b);
      graph[b].push_back(a);
    }

    vector<int> cities;
    int cont = 0;

    for(int i = 1; i <= n; i++) {
      if(!visited[i]) {
        dfs(i);

        cities.push_back(i);
        cont++;
      }
    }

    cout<<cont - 1<<endl;
    for(int i = 1; i < cities.size(); i++) {
        cout<<cities[i - 1]<<" "<<cities[i]<<endl;
    }

    return 0;
}

