/**
*  Generated by tpp tool
*  File: dp_a_ite.cpp
*  Created: 26-02-2024 19:03:54
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int INF = 1e9+7;
const int MAX = 1e5+5;

int n;
int h[MAX];
int dp[MAX];

void solve() {
  for(int i = 2; i <= n; i++) dp[i] = INF;

  for(int i = 1; i <= n; i++) {
    if(i + 1 <= n) {
      int cost1 = abs(h[i + 1] - h[i]);
      dp[i + 1] = min(dp[i + 1], dp[i] + cost1);
    }

    if(i + 2 <= n) {
      int cost2 = abs(h[i + 2] - h[i]);
      dp[i + 2] = min(dp[i + 2], dp[i] + cost2);
    }
  }

  cout<<dp[n]<<endl;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>n;

    for(int i = 1 ; i <= n; i++) cin>>h[i];

    solve();

    return 0;
}

