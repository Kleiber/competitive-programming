/**
*  Generated by tpp tool
*  File: dp_g_back.cpp
*  Created: 27-02-2024 12:08:41
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


int N, M;
vector<vector<int>> graph;

int solve(int u) {
  int len = 0;

  for(int i = 0; i < graph[u].size(); i++) {
    int v = graph[u][i];
    len = max(len, 1 + solve(v));
  }

  return len;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>N>>M;

    graph = vector<vector<int>>(N + 1);

    for(int i = 0; i < M; i++) {
      int u, v;
      cin>>u>>v;

      graph[u].push_back(v);
    }

    int ans = 0;

    for(int i = 1; i <= N; i++) {
      ans = max(ans, solve(i));
    }

    cout<<ans<<endl;

    return 0;
}

