/**
*  Generated by tpp tool
*  File: dp_c_back.cpp
*  Created: 26-02-2024 22:06:44
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int MAX = 1e5+5;

int n;
int points[MAX][3];

int solve(int pos, int prev) {
  if(pos > n) return 0;

  int sum = 0;

  for(int i = 0; i < 3; i++) {
    if(i != prev) {
      sum = max(sum, points[pos][i] + solve(pos + 1, i));
    }
  }

  return sum;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>n;

    for(int i = 1; i <= n; i++) {
      cin>>points[i][0]>>points[i][1]>>points[i][2];
    }

    cout<<solve(1, 3)<<endl;

    return 0;
}

