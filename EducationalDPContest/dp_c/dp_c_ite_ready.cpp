/**
*  Generated by tpp tool
*  File: dp_c_ite.cpp
*  Created: 26-02-2024 22:06:52
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int MAX = 1e5+5;

int n;
int points[MAX][3];
int dp[MAX][3];

void solve() {
   memset(dp, 0, sizeof(dp));

  for(int pos = 1; pos <= n; pos++) {
    int a = points[pos][0];
    int b = points[pos][1];
    int c = points[pos][2];

    dp[pos][0] = max(dp[pos][0], max(b + dp[pos - 1][1], c + dp[pos - 1][2]));
    dp[pos][1] = max(dp[pos][1], max(a + dp[pos - 1][0], c + dp[pos - 1][2]));
    dp[pos][2] = max(dp[pos][2], max(a + dp[pos - 1][0], b + dp[pos - 1][1]));
  }

  cout<<max(dp[n][0], max(dp[n][1], dp[n][2]))<<endl;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>n;

    for(int i = 1; i <= n; i++) {
      cin>>points[i][0]>>points[i][1]>>points[i][2];
    }

    solve();

    return 0;
}

