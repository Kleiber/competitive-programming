/**
*  Generated by tpp tool
*  File: dp_f_ite.cpp
*  Created: 27-02-2024 02:16:07
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int MAX = 3005;

string S, T;
int N, M;
int dp[MAX][MAX];

void solve() {
  memset(dp, 0, sizeof(dp));
  
  for(int i = 0 ; i <= N; ++i) {
    for(int j = 0; j <= M; ++j)  {
      if(i ==0 || j == 0) dp[i][j] = 0;
      else {
        if(S[i - 1] == T[j - 1]) dp[i][j] = 1 + dp[i - 1][j - 1];
        else dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }

  string trace = "";

  int i = N;
  int j = M;

  while(i != 0 && j != 0) {
    if(S[i - 1] == T[j - 1]) {
      trace += S[i - 1];
      i = i - 1;
      j = j - 1;
    } else {
      if(dp[i - 1][j] > dp[i][j - 1]) i = i - 1;
      else j = j - 1;
    }
  }

  reverse(trace.begin(), trace.end());
  cout<<trace<<endl;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>S;
    cin>>T;

    N = S.size();
    M = T.size();

    solve();

    return 0;
}

