/**
*  Generated by tpp tool
*  File: dp_f_rec.cpp
*  Created: 27-02-2024 02:16:11
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int MAX = 3005;

string S, T;
int N, M;
int dp[MAX][MAX];

int solve(int i, int j) {
  if(i >= N || j >= M) return 0;
  if(dp[i][j] != -1) return dp[i][j];

  int len1 = 0, len2 = 0, len3 = 0;

  if(S[i] == T[j]) len1 = max(len1, 1 + solve(i + 1, j + 1));
  len2 = solve(i + 1, j);
  len3 = solve(i, j + 1);

  return dp[i][j] = max(len1, max(len2, len3));
}

void trace(int i, int j) {
  if(i >= N || j >= M) return;

  int len1 = 0, len2 = 0, len3 = 0;
  int currentLen = solve(i, j);

  if(S[i] == T[j]) {
    len1 = 1 + solve(i + 1, j + 1);
    if(currentLen == len1) {
      cout<<S[i];
      return trace(i + 1, j + 1);
    }
  }

  len2 = solve(i + 1, j);
  if(currentLen == len2) return trace(i + 1, j);

  len3 = solve(i, j + 1);
  if(currentLen == len3) return trace(i, j + 1);
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    memset(dp, -1, sizeof(dp));

    cin>>S;
    cin>>T;

    N = S.size();
    M = T.size();

    int len = solve(0, 0);

    trace(0,0);

    cout<<endl;

    return 0;
}


