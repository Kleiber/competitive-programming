/**
*  Generated by tpp tool
*  File: dp_i_rec.cpp
*  Created: 27-02-2024 16:21:54
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int MAX = 3005;

int N;
vector<double> P;
double dp[MAX][MAX];

double solve(int pos, int cont) {
  if(pos == N) {
    if(cont > N - cont) return 1.0;
    else return 0.0;
  }
  if(dp[pos][cont] != -1) return dp[pos][cont];

  dp[pos][cont] = 0.0;

  dp[pos][cont] += P[pos] * solve(pos + 1, cont + 1);
  dp[pos][cont] += (1 - P[pos]) * solve(pos + 1, cont);

  return dp[pos][cont];
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    for(int i = 0; i < MAX; i++) {
      for(int j = 0; j < MAX; j++) dp[i][j] = -1.0;
    }

    cin>>N;

    P = vector<double>(N);

    for(int i = 0; i < N; i++) cin>>P[i];

    printf("%0.10lf\n", solve(0, 0));

    return 0;
}

