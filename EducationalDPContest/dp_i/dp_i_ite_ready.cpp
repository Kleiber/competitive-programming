/**
*  Generated by tpp tool
*  File: dp_i_ite.cpp
*  Created: 27-02-2024 16:21:57
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int MAX = 3005;

int N;
vector<double> P;
double dp[MAX][MAX];

void solve() {
  for(int i = 0; i < MAX; i++) {
    for(int j = 0; j < MAX; j++) {
      if(j == 0) dp[i][j] = 1.0;
      else dp[i][j] = 0.0;
    }
  }

  int heads = N/2 + 1;

  for(int pos = 1; pos <= N; pos++) {
    for(int cont = 1; cont <= heads; cont++) {
      dp[pos][cont] += P[pos - 1] * dp[pos - 1][cont - 1];
      dp[pos][cont] += (1 - P[pos - 1]) * dp[pos - 1][cont];
    }
  }

  printf("%0.10lf\n", dp[N][heads]);
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>N;

    P = vector<double>(N);

    for(int i = 0; i < N; i++) cin>>P[i];

    solve();

    return 0;
}

