/**
*  Generated by tpp tool
*  File: dp_b_ite.cpp
*  Created: 26-02-2024 20:47:43
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int INF = 1e9+7;
const int MAX = 1e5+5;

int n, k;
int h[MAX];
int dp[MAX];

void solve() {
  for(int i = 2; i <= n; i++) dp[i] = INF;

  for(int i = 1; i <= n; i++) {
    int cost = INF;

    for(int j = 1; j <= k; j++) {
      if(i + j <= n) {
        int costk = abs(h[i + j] - h[i]);
        dp[i + j] = min(dp[i + j], dp[i] + costk);
      }
    }
  }

  cout<<dp[n]<<endl;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>n>>k;

    for(int i = 1; i <= n; i++) cin>>h[i];

    solve();

    return 0;
}

