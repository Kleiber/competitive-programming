/**
*  Generated by tpp tool
*  File: dp_h_rec.cpp
*  Created: 27-02-2024 12:58:51
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define WALL '#'

const int MOD = 1e9+7;
const int MAX = 1e3+5;

int H, W;
vector<string> grid;
int dp[MAX][MAX];

bool isValid(int r, int c) {
  return r >= 0 && r < H && c >= 0 && c < W;
}

int solve(int r, int c) {
  if(!isValid(r, c)) return 0;
  if(grid[r][c] == WALL) return 0;
  if(r == H - 1 && c == W - 1) return 1;
  if(dp[r][c] != -1) return dp[r][c];

  dp[r][c] = 0;

  dp[r][c] = (dp[r][c] + solve(r + 1, c)) % MOD;
  dp[r][c] = (dp[r][c] + solve(r, c + 1)) % MOD;

  return dp[r][c];
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    memset(dp, -1, sizeof(dp));

    cin>>H>>W;

    grid = vector<string>(H);

    for(int i = 0; i < H; i++) cin>>grid[i];

    cout<<solve(0, 0)<<endl;

    return 0;
}

