/**
*  Generated by tpp tool
*  File: dp_h_ite.cpp
*  Created: 27-02-2024 12:58:56
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define WALL '#'

const int MOD = 1e9+7;
const int MAX = 1e3+5;

int H, W;
vector<string> grid;
int dp[MAX][MAX];

void solve() {
  memset(dp, 0, sizeof(dp));
  
  dp[0][0] = 1;
  
  for(int i = 0; i < H; i++) {
		for(int j = 0; j < W; j++) {
			if(grid[i][j] != WALL) {
				if(i > 0) dp[i][j] = (dp[i][j] + dp[i - 1][j]) % MOD;
				if(j > 0) dp[i][j] = (dp[i][j] + dp[i][j - 1]) % MOD;
      }
    }
  }

  cout<<dp[H - 1][W - 1]<<endl;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>H>>W;

    grid = vector<string>(H);

    for(int i = 0; i < H; i++) cin>>grid[i];

    solve();

    return 0;
}
