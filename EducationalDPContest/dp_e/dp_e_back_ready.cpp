/**
*  Generated by tpp tool
*  File: dp_e_back.cpp
*  Created: 27-02-2024 00:51:55
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int MAX = 1e5+5;
const int INF = 1e12+5;

int N, W;
int w[MAX], v[MAX];

long long solve(int pos, int value) {
  if(value < 0) return INF;
  if(value == 0) return 0;
  if(pos > N) return INF;

  long long take = w[pos] + solve(pos + 1, value - v[pos]);
  long long dont_take = solve(pos + 1, value);

  return min(take, dont_take);
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>N>>W;

    for(int i = 1; i <= N; i++) cin>>w[i]>>v[i];

    int ans = 0;

    for(int i = 1e5; i > 0; i--) {
        if(solve(0, i) <= W) {
            ans = i;
            break;
        }
    }

    cout<<ans<<endl;

    return 0;
}
