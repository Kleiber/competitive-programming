/**
*  Generated by tpp tool
*  File: dp_e_ite.cpp
*  Created: 27-02-2024 00:52:01
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int MAX = 1e5+5;
const int INF = 1e12+5;

long long N, W;
int w[MAX], v[MAX];
long long dp[MAX];

void solve() {
  for(int i = 1; i < MAX; ++i) dp[i] = INF;

  for(int pos = 1; pos <= N; pos++) {
    for(int value = 1e5; value >= 0; value--) {
      if(dp[value] + w[pos] <= W) {
        dp[value + v[pos]] = min(dp[value + v[pos]], w[pos] + dp[value]);
      }
    }
  }

  int ans = 0;

  for(int i = 1e5; i >= 0; i--) {
    if(dp[i] != INF) {
      ans = i;
      break;
    }
  }

  cout<<ans<<endl;

}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>N>>W;

    for(int i = 1; i <= N; i++) cin>>w[i]>>v[i];

    solve();

    return 0;
}
