/**
*  Generated by tpp tool
*  File: 11561_Getting_Gold.cpp
*  Created: 01-01-2024 18:13:38
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define PLAYER 'P'
#define GOLD 'G'
#define TRAP 'T'
#define WALL '#'
#define FLOOR '.'
#define MOV 4

int dr[] = {0, 1, 0, -1};
int dc[] = {1, 0, -1, 0};

int R, C;
int totalGold;
vector<string> graph;
vector<vector<bool>> visited;

bool isValid(int r, int c) {
  return r >= 0 && r < R && c >= 0 && c < C;
}

bool shouldStopByTrap(int r, int c) {
  bool shouldStop = 0;

  for(int k = 0; k < MOV; k++) {
    int nr = r + dr[k];
    int nc = c + dc[k];

    if(isValid(nr, nc) && graph[nr][nc] == TRAP) {
      shouldStop = 1;
      break;
    }
  }

  return shouldStop;
}


void dfs(int r, int c) {
  if(visited[r][c]) return;

  visited[r][c] = 1;
  
  if(graph[r][c] == GOLD) totalGold++;

  if(shouldStopByTrap(r, c)) return;

  for(int k = 0; k < MOV; k++) {
    int nr = r + dr[k];
    int nc = c + dc[k];

    if(isValid(nr, nc) && graph[nr][nc] == FLOOR || graph[nr][nc] == GOLD) {
      dfs(nr, nc);
    }
  }
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    while(cin>>C>>R) {
      graph = vector<string>(R);
      visited = vector<vector<bool>>(R, vector<bool>(C, 0));

      for(int i = 0; i < R; i++) cin>>graph[i];

      totalGold = 0;

      bool wasFound = 0; 
      for(int i = 0; i < R; i++) {
        for(int j = 0; j < C; j++) {
          if(graph[i][j] == PLAYER) {
            dfs(i, j);
            wasFound = 1;
            break;
          }
        }

        if(wasFound) break;
      }

      cout<<totalGold<<endl;
    }

    return 0;
}

