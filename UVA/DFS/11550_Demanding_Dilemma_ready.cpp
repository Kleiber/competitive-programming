/**
*  Generated by tpp tool
*  File: 11550_Demanding_Dilemma.cpp
*  Created: 31-12-2023 13:37:33
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MAX 50

int cases, nodes, edges;
char M[MAX][MAX];

bool checkEdges() {
  for(int c = 0; c < edges; c++) {
    int cont = 0;
    for(int r = 0; r < nodes; r++) {
      cont += (M[r][c] - '0');
    }

    if(cont != 2) return 0;
  }
  return 1;
}

bool checkMultipleEdges() {
  unordered_map<string, bool> visited;
  string aux = "";

  for(int c = 0; c < edges; c++) {
    string aux = "";
    for(int r = 0; r < nodes; r++) {
      aux += M[r][c];
    }

    if(visited[aux]) return 0;
    else visited[aux] = 1;
  }

  return 1;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>cases;

    while(cases--) {
      cin>>nodes>>edges;

      memset(M, -1, sizeof(M));

      for(int i = 0; i < nodes; i++) {
        for(int j = 0; j < edges; j++) cin>>M[i][j];
      }

      if(checkEdges() && checkMultipleEdges()) cout<<"Yes"<<endl;
      else cout<<"No"<<endl;

    }

    return 0;
}

