/**
*  Generated by tpp tool
*  File: 871_Counting_Cells_In_A_Blob.cpp
*  Created: 01-01-2024 19:05:06
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MOV 8
#define BLOB '1'

int dr[] = {0, 1, 1, 1, 0, -1,-1,-1};
int dc[] = {1, 1, 0, -1,-1,-1, 0, 1};

int R, C;
vector<string> graph;
vector<vector<bool>> visited;

bool isValid(int r, int c) {
  return r >= 0 && r < R && c >= 0 && c < C;
}

int dfs(int r, int c) {
  if(visited[r][c]) return 0;

  visited[r][c] = 1;

  int cont = 1;
  for(int k = 0; k < MOV; k++) {
    int nr = r + dr[k];
    int nc = c + dc[k];

    if(isValid(nr, nc) && graph[nr][nc] == BLOB) {
      cont += dfs(nr, nc);
    }
  }

  return cont;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    string line;
    int cases;

    cin>>cases;
    getline(cin,line);
    getline(cin,line);

    while(cases--) {
      graph.clear();

      while(getline(cin, line) && line.size() > 0) {
        graph.push_back(line);
      }

      R = graph.size();
      C = graph[0].size();
      visited = vector<vector<bool>>(R, vector<bool>(C, 0));

      int ans = 0;
      for(int i = 0; i < R; i++) {
        for(int j = 0; j < C; j++) {
          if(graph[i][j] == BLOB && !visited[i][j]) {
            ans = max(ans, dfs(i, j));
          }
        }
      }

      cout<<ans<<endl;
      if(cases) cout<<endl;
    }

    return 0;
}

