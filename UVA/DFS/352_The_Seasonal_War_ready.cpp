/**
*  Generated by tpp tool
*  File: 352_The_Seasonal_War.cpp
*  Created: 01-01-2024 16:52:40
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define WAR_EAGLE '1'
#define MOV 8

int dr[] = {0, 1, 1, 1, 0, -1,-1,-1};
int dc[] = {1, 1, 0, -1,-1,-1, 0, 1};

int N;
vector<string> graph;
vector<vector<bool>> visited;

bool isValid(int r, int c) {
  return r >= 0 && r < N && c >= 0 && c < N;
}

void dfs(int r, int c) {
  if(visited[r][c]) return;

  visited[r][c] = 1;

  for(int k = 0; k < MOV; k++) {
    int nr = r + dr[k];
    int nc = c + dc[k];

    if(isValid(nr, nc) && graph[nr][nc] == WAR_EAGLE) {
      dfs(nr, nc);
    }
  }
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int cases = 1;

    while(cin>>N) {
      graph = vector<string>(N);
      visited = vector<vector<bool>>(N, vector<bool>(N, 0));

      for(int i = 0; i < N; i++) cin>>graph[i];

      int ans = 0;
      for(int i = 0; i < N; i++) {
        for(int j = 0; j < N; j++) {
          if(graph[i][j] == WAR_EAGLE && !visited[i][j]) {
            dfs(i, j);
            ans++;
          }
        }
      }

      cout<<"Image number "<<cases++<<" contains "<<ans<<" war eagles."<<endl;
    }

    return 0;
}

