/**
*  Generated by tpp tool
*  File: cartrouble.cpp
*  Created: 25-04-2023 12:46:04
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <unordered_map>
#include <unordered_set>
using namespace std;


void dfs(unordered_map<int, vector<int>> &G, unordered_set<int> &visited, int node) {
  visited.insert(node);

  for(int child : G[node]) {
    if(visited.count(child) == 0) {
      dfs(G, visited, child);
    }
  } 
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int n;
    cin>>n;

    vector<int> streets;
    unordered_map<int, vector<int>> G, G_inv;
    unordered_set<int> visited, visited_inv;

    for(int i = 0; i < n; i++) {
      int id;
      cin>>id;

      streets.push_back(id);

      int number_reached_streets;
      cin>>number_reached_streets;

      for(int j = 0; j < number_reached_streets; j++) {
        int id_reached;
        cin>>id_reached;

        G[id].push_back(id_reached);
        G_inv[id_reached].push_back(id);
      }
    }

    dfs(G, visited, 0);
    dfs(G_inv, visited_inv, 0);

    if(visited.size() == n && visited_inv.size() == n) {
      cout<<"NO PROBLEMS"<<endl;
    } else {
      for(int id : streets) {
        if(visited_inv.count(id) == 0) {
          cout<<"TRAPPED "<<id<<endl;
        }
      }

      for(int id: streets) {
        if(visited.count(id) == 0) {
          cout<<"UNREACHABLE "<<id<<endl;
        }
      }
    }

    return 0;
}

