/**
*  Generated by tpp tool
*  File: terraces.cpp
*  Created: 23-04-2023 00:11:12
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
using namespace std;


struct node {
  int r;
  int c;
};

bool isValid(int r, int c, int R, int C) {
  return r >= 0 && r < R && c >=0 && c < C;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int x, y;
    cin>>x>>y;

    vector<vector<int>> M(y, vector<int>(x));
    vector<vector<bool>> visited(y,vector<bool>(x, 0));

    int dr[4] = {-1, 0, 1, 0};
    int dc[4] = {0, 1, 0, -1};

    for(int r = 0; r < y; r++) {
      for(int c = 0; c < x; c++) {
        cin>>M[r][c];
      }
    }

    int ans = 0;

    for(int r = 0; r < y; r++) {
      for(int c = 0; c < x; c++) {

        if(!visited[r][c]){
          queue<node> Q;

          Q.push(node{r, c});
          visited[r][c] = 1;

          int cont = 0;
          bool isSource = 0;

          while(!Q.empty()) {
            node curr = Q.front();
            Q.pop();

            cont++;

            for(int k = 0; k < 4; k++){
              int nr = curr.r + dr[k];
              int nc = curr.c + dc[k];
              
              if(isValid(nr, nc, y, x)) {
               
                if (M[nr][nc] == M[curr.r][curr.c] && !visited[nr][nc]) {
                  Q.push(node{nr, nc});
                  visited[nr][nc] = 1;
                }
                
                if (M[r][c] > M[nr][nc])
                  isSource = 1;
              }
            }
          }

          if(!isSource) ans += cont;
        }

      }
    }

    cout<<ans<<endl;

    return 0;
}

