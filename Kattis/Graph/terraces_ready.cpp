/**
*  Generated by tpp tool
*  File: terraces.cpp
*  Created: 01-01-2024 19:57:50
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MOV 4

int dr[] = {0, 1, 0, -1};
int dc[] = {1, 0, -1, 0};

struct node {
  int row;
  int col;
};

bool isValid(int r, int c, int R, int C) {
  return r >= 0 && r < R && c >= 0 && c < C;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int R, C;
    cin>>C>>R;

    vector<vector<int>> graph(R);
    vector<vector<bool>> visited(R, vector<bool>(C, 0));

    for(int i = 0; i < R; i++) {
      for(int j = 0; j < C ;j++) {
        int height;
        cin>>height;
        graph[i].push_back(height);
      }
    }

    int ans = 0;

    for(int r = 0; r < R; r++) {
      for(int c = 0; c < C ; c++) {
        if(visited[r][c]) continue;

        bool canFlow = 0;
        int totalCells = 0;

        // BFS
        queue<node> Q;
        Q.push(node{r, c});
        visited[r][c] = 1;

        while(!Q.empty()) {
          node u = Q.front();
          Q.pop();

          totalCells++;

          for(int k = 0; k < MOV; k++) {
            int nr = u.row + dr[k];
            int nc = u.col + dc[k];

            if(isValid(nr, nc, R, C)) {
              if(!visited[nr][nc] && graph[nr][nc] == graph[u.row][u.col]) {
                Q.push(node{nr, nc});
                visited[nr][nc] = 1;
              }

              if(graph[nr][nc] < graph[u.row][u.col]) canFlow = 1;
            }
          }
        }

        if(!canFlow) ans += totalCells;
      }
    }

    cout<<ans<<endl;

    return 0;
}

