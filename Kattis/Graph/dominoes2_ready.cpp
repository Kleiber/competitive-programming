/**
*  Generated by tpp tool
*  File: dominoes2.cpp
*  Created: 22-04-2023 23:01:10
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
using namespace std;


int n, m, l, x, y, z;
vector<vector<int>> G;
vector<bool> visited;

void dfs(int node) {
  visited[node] = 1;
  
  for(int i = 0; i < G[node].size(); i++) {
    int child = G[node][i];
    if(!visited[child]) dfs(child);
  }
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int t;
    cin>>t;

    while(t--) {
      cin>>n>>m>>l;

      G = vector<vector<int>>(n, vector<int>());
      visited = vector<bool>(n, 0);

      for(int i = 0; i < m; i++) {
        cin>>x>>y;
        G[x - 1].push_back(y - 1);
      }

      for(int i = 0; i < l; i++) {
        cin>>z;
        dfs(z - 1);
      }

      int total = 0;
      for(int i = 0; i < n; i++) {
        if(visited[i]) total++;
      }

      cout<<total<<endl;
    }

    return 0;
}

