/**
*  Generated by tpp tool
*  File: coast.cpp
*  Created: 04-01-2024 23:14:16
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MOV 4
#define WATER '0'

int dr[] = {0, 1, 0, -1};
int dc[] = {1, 0, -1, 0};

int R, C;
vector<vector<char>> graph;
vector<vector<bool>> visited;

bool isValid(int r, int c) {
  return r >= 0 && r < R && c >= 0 && c < C;
}

void dfs(int r, int c) {
  if(visited[r][c]) return;

  visited[r][c] = 1;

  for(int k = 0; k < MOV; k++) {
    int nr = r + dr[k];
    int nc = c + dc[k];

    if(isValid(nr, nc) && graph[nr][nc] == WATER) {
      dfs(nr, nc);
    }
  }
}

int getCoastLenght() {
  int lenght = 0;

  for(int r = 0 ; r < R; r++) {
    for(int c = 0; c < C; c++) {

      if(graph[r][c] != WATER) {
        for (int k = 0; k < MOV; k++) {
          int nr = r + dr[k];
          int nc = c + dc[k];

          // validate if it is a coast
          if(isValid(nr, nc) && visited[nr][nc]) lenght++;
        }
      }
    }
  }

  return lenght;
}


int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>R>>C;

    // create a border
    R = R + 2;
    C = C + 2;

    graph = vector<vector<char>>(R, vector<char>(C, '0'));
    visited = vector<vector<bool>>(R, vector<bool>(C, 0));

    for(int i = 0; i < R - 2; i++) {
      for(int j = 0; j < C - 2; j++) {
        char letter;
        cin>>letter;
        graph[i + 1][j + 1] = letter;
      }
    }

    dfs(0, 0);

    cout<<getCoastLenght()<<endl;

    return 0;
}

