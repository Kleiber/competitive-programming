/**
*  Generated by tpp tool
*  File: 10kindofpeople.cpp
*  Created: 05-01-2024 15:11:52
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MOV 4
#define BINARY '0'

struct node {
  int value;
  int component;
};

int dr[] = {0, 1, 0, -1};
int dc[] = {1, 0, -1, 0};

int R, C, Q;
vector<vector<node>> graph;
vector<vector<bool>> visited;

bool isValid(int r, int c) {
  return c >= 0 && c < C && r >= 0 && r < R;
}

void dfs(int r, int c, char value, int component) {
  if(visited[r][c]) return;

  visited[r][c] = 1;
  graph[r][c].component = component;

  for(int k = 0; k < MOV; k++) {
    int nr = r + dr[k];
    int nc = c + dc[k];

    if(isValid(nr, nc) && graph[nr][nc].value == value) {
      dfs(nr, nc, value, component);
    }
  }
}

string canPersonMove(int r1, int c1, int r2, int c2) {
  bool isSameComponent = graph[r1][c1].component == graph[r2][c2].component;

  if(isSameComponent) {
    if(graph[r1][c1].value == BINARY) return "binary";
    else return "decimal";
  }

  return "neither";
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>R>>C;

    graph = vector<vector<node>>(R);
    visited = vector<vector<bool>>(R, vector<bool>(C, 0));

    for(int i = 0; i < R; i++) {
      for(int j = 0; j < C; j++) {
        char value;
        cin>>value;

        graph[i].push_back(node{value, 0});
      }
    }

    int component = 1;
    for(int i = 0; i < R; i++) {
      for(int j = 0; j < C; j++) {
        if(!visited[i][j]) {
          dfs(i, j, graph[i][j].value, component);
          component++;
        }
      }
    }

    cin>>Q;

    for(int i = 0; i < Q; i++) {
      int r1, c1, r2, c2;
      cin>>r1>>c1>>r2>>c2;

      cout<<canPersonMove(r1 - 1, c1 - 1, r2 - 1, c2 - 1)<<endl;
    }

    return 0;
}

