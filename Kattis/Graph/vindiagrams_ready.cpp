/**
*  Generated by tpp tool
*  File: vindiagrams.cpp
*  Created: 05-01-2024 13:10:41
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MOV 4
#define BOUNDARY 'X'
#define BLANK '.'
#define SETA 'A'
#define SETB 'B'
#define INTERSECTION 'I'

struct node {
  int row;
  int col;
  char set;
};


// First 4 values are for vertical and horizontal movements
// Last 4 values are for diagonal movements
int dr[] = {0, 1, 0, -1, -1, 1, 1, -1};
int dc[] = {1, 0, -1, 0, 1, 1, -1, -1};

int R, C;
vector<string> graph;
vector<vector<bool>> visited;

bool isValid(int r, int c) {
  return r >= 0 && r < R && c >= 0 && c < C;
}

bool isIntersection(int r, int c) {
  if(graph[r][c] != BOUNDARY) return 0;

  for(int k = 0; k < MOV; k++) {
    int nr = r + dr[k];
    int nc = c + dc[k];

    if(!isValid(nr, nc) || graph[nr][nc] != BOUNDARY) return 0; 
  }

  // Mark intersection
  graph[r][c] = INTERSECTION;

  return 1;
}

void markSetBoundary(int r, int c, char set) {
  if(visited[r][c]) return;

  visited[r][c] = 1;
  // Mark the boundary as part of the set
  graph[r][c] = set;

  for(int k = 0; k < MOV; k++) {
    int nr = r + dr[k];
    int nc = c + dc[k];

    if(isValid(nr, nc)) {
      if(graph[nr][nc] == INTERSECTION) {
        nr += dr[k];
        nc += dc[k];
      }

      if(graph[nr][nc] == BOUNDARY) {
        markSetBoundary(nr, nc, set);
      }
    }
  }
}

bool isInSet(int r, int c, char set) {
  vector<vector<bool>> seen(R, vector<bool>(C, 0));

  queue<node> Q;
  Q.push(node{r, c, set});
  seen[r][c] = 1;

  while(!Q.empty()) {
    node n = Q.front();
    Q.pop();

    for(int k = 0; k < MOV; k++) {
      int nr = n.row + dr[k];
      int nc = n.col + dc[k];

      // Node should be within the set boundary
      if(!isValid(nr, nc)) return 0;
      
      if(graph[nr][nc] != n.set && graph[nr][nc] != INTERSECTION &&  !seen[nr][nc]) {
        Q.push(node{nr, nc, n.set});
        seen[nr][nc] = 1;
      }
    }
  }

  return 1;
}

int getSetArea(int r, int c) {
  if(visited[r][c]) return 0;

  visited[r][c] = 1;
  int cont = 1;

  for(int k = 0; k < MOV; k++) {
    int nr = r + dr[k];
    int nc = c + dc[k];

    if(isValid(nr, nc) && graph[nr][nc] == BLANK) {
      cont += getSetArea(nr, nc);
    }
  }

  return cont;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>R>>C;

    graph = vector<string>(R);
    visited = vector<vector<bool>>(R, vector<bool>(C, 0));

    for(int i = 0; i < R; i++) cin>>graph[i];

    // Find and mark boundaries
    node A, B;
    vector<node> intersections;
    
    for(int i = 0; i < R; i++) {
      for(int j = 0; j < C; j++) {
        if(isIntersection(i, j)) intersections.push_back(node{i, j, INTERSECTION});
        if(graph[i][j] == SETA) A = node{i, j, SETA};
        if(graph[i][j] == SETB) B = node{i, j, SETB};
      }
    }

    markSetBoundary(A.row, A.col, A.set);
    markSetBoundary(B.row, B.col, B.set);

    // calculate set area
    int areaA, areaB, areaI;
    areaA = areaB = areaI = 0;

    for(int i = 0; i < intersections.size(); i++) {
      node n = intersections[i];

      for(int k = 4; k < 4 + MOV; k++) {
        int nr = n.row + dr[k];
        int nc = n.col + dc[k];

        bool isInSetA = isInSet(nr, nc, SETA);
        bool isInSetB = isInSet(nr, nc, SETB);

        if(isInSetA && isInSetB) areaI += getSetArea(nr, nc);
        else{
          if(isInSetA) areaA += getSetArea(nr, nc);
          if(isInSetB) areaB += getSetArea(nr, nc);
        }
      }
    }

    cout<<areaA<<" "<<areaB<<" "<<areaI<<endl;

    return 0;
}

