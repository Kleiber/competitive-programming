/**
*  Generated by tpp tool
*  File: abc339_b.cpp
*  Created: 03-02-2024 09:14:55
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MOV 4
#define WHITE '.'
#define BLACK '#'

int dr[] = {-1, 0, 1, 0};
int dc[] = {0, 1, 0, -1};

int toroidal(int current, int boundary) {
  if(current < 0) return boundary - 1;
  if(current >= boundary) return 0;
  return current;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int H, W, N;
    cin>>H>>W>>N;

    vector<vector<char>> M(H, vector<char>(W, WHITE));

    int r = 0;
    int c = 0;
    int rotation = 0;

    for(int i = 0; i < N; i++) {

      if(M[r][c] == WHITE) {
        M[r][c] = BLACK;
        rotation = toroidal(rotation + 1, MOV);
      } else {
        M[r][c] = WHITE;
        rotation = toroidal(rotation - 1, MOV);
      }

      r = toroidal(r + dr[rotation], H);
      c = toroidal(c + dc[rotation], W);
    }

    for(int i = 0; i < H; i++) {
      for(int j = 0; j < W; j++) {
        cout<<M[i][j];
      }
      cout<<endl;
    }

    return 0;
}

