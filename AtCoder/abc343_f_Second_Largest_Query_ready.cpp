/**
*  Generated by tpp tool
*  File: abc343_f_Second_Largest_Query.cpp
*  Created: 03-03-2024 18:10:16
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MAX 200005

struct info {
  int maximum;
  int maximum_cont;
  int second_maximum;
  int second_maximum_cont;
};

info merge(info &a, info &b) {
  map<int, int> M;
  M[a.maximum] += a.maximum_cont;
  M[a.second_maximum] += a.second_maximum_cont;
  M[b.maximum] += b.maximum_cont;
  M[b.second_maximum] += b.second_maximum_cont;

  vector<pair<int,int>> V(M.begin(), M.end());
  int last = V.size() - 1;

  if(V.size() < 2) return info{V[last].first, V[last].second, -1, 0};
  else return info{V[last].first, V[last].second, V[last - 1].first, V[last - 1].second};
}

int N, Q;
int A[MAX];
info tree[4 * MAX];

void build(int node, int L, int R) {
  if(L == R) tree[node] = info{A[L], 1, -1, 0} ;
  else {
    build(2*node, L, (L + R)/2);
    build(2*node + 1, (L + R)/2 +1, R);

    tree[node] = merge(tree[2*node], tree[2*node + 1]);
  } 
}

void update(int node, int L, int R, int ind, int val) {
  if(L > ind || R < ind) return;

  if(L == R) tree[node] = info{val, 1, -1, 0};
  else {
    update(2*node, L, (L + R)/2, ind, val);
    update(2*node + 1, (L + R)/2 +1, R, ind, val);

    tree[node] = merge(tree[2*node], tree[2*node + 1]);
  }
}

info query(int node, int L, int R, int l, int r) {
  if(L > r || R < l) return info{-1, 0, -2, 0};
  if(L >= l && R <= r) return tree[node];

  info left = query(2*node, L, (L + R)/2, l, r);
  info right = query(2*node + 1, (L + R)/2 + 1, R, l, r);

  return merge(left, right);
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>N>>Q;

    for(int i = 0; i < N; i++) cin>>A[i];

    build(1, 0, N - 1);

    while(Q--) {
      int type;
      cin>>type;

      if(type == 1) {
        int p, x;
        cin>>p>>x;

        update(1, 0, N - 1, p - 1, x);
      } else {
        int l, r;
        cin>>l>>r;

        info ans = query(1, 0, N - 1, l - 1, r - 1);
        cout<<ans.second_maximum_cont<<endl;
      }
    }

    return 0;
}

