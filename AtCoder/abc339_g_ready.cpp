/**
*  Generated by tpp tool
*  File: abc339_g.cpp
*  Created: 08-02-2024 18:21:52
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MAX 200005

struct segment {
  vector<int> num;
  vector<long long int> sum;

  // Constructors
  segment() {
  }

  segment(vector<int> p_num, vector<long long int> p_sum) {
    num = p_num;
    sum = p_sum;
  }

  segment(int a) {
    num.push_back(a);
    sum.push_back(a);
  }

  // Get sum from ordered vector
  long long int getSum(int x) {
    int ind = upper_bound(num.begin(), num.end(), x) - num.begin();
    
    if(ind == 0) return 0;
    else return sum[ind - 1];
  }
};

int A[MAX];
segment tree[4*MAX];

segment merge(segment a, segment b) {
	vector<int> num;
	int i = 0;
  int j = 0;
	while (i < a.num.size() && j < b.num.size()) {
		if (a.num[i] < b.num[j]) num.push_back(a.num[i++]);
		else num.push_back(b.num[j++]);
	}
  while(i < a.num.size()) num.push_back(a.num[i++]);
  while(j < b.num.size()) num.push_back(b.num[j++]);

  vector<long long int> sum;
  for(int k = 0; k < num.size(); k++) {
    if(k == 0) sum.push_back(num[k]);
    else sum.push_back(num[k] + sum[k - 1]);
  }

	return segment(num, sum);
}

void build(int node, int L, int R) {
  if(L == R) tree[node] = segment(A[L]);
  else {
    build(2*node, L, (L + R)/2);
    build(2*node + 1, (L + R)/2 + 1, R);

    tree[node] = merge(tree[2*node], tree[2*node + 1]);
  }
}

long long int query(int node, int L, int R, int l, int r, int x) {
  if(L > r || R < l) return 0;

  if(L >= l && R <= r) return tree[node].getSum(x);

  long long int left = query(2*node, L, (L + R)/2, l, r, x);
  long long int right = query(2*node + 1, (L + R)/2 + 1, R, l, r, x);

  return left + right;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int N;
    cin>>N;

    for(int i = 0; i < N; i++) cin>>A[i];

    build(1, 0, N - 1);

    int Q;
    cin>>Q;

    vector<long long int> ans(Q + 1, 0);

    for(int i = 1; i <= Q; i++) {
      long long int a, b, g;
      cin>>a>>b>>g;

      long long int l, r, x;
      l = a ^ ans[i - 1];
      r = b ^ ans[i - 1];
      x = g ^ ans[i - 1];

      ans[i] = query(1, 0, N - 1, l - 1, r - 1, x);
      cout<<ans[i]<<endl;
    }


    return 0;
}

