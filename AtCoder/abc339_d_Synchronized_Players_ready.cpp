/**
*  Generated by tpp tool
*  File: abc339_d_Synchronized_Players.cpp
*  Created: 08-02-2024 16:37:59
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MAX 65
#define MOV 4
#define PLAYER 'P'
#define OBSTACLE '#'

struct position {
  int r;
  int c;
};

struct movement {
  position p1;
  position p2;
  int steps;
};

int dr[] = {0, 1, 0, -1};
int dc[] = {1, 0, -1, 0};

int N;
vector<string> graph;
bool visited[MAX][MAX][MAX][MAX];

bool isValid(int r, int c) {
  return r >= 0 && r < N && c >= 0 && c < N;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>N;

    graph = vector<string>(N);
    memset(visited, 0, sizeof(visited));

    for(int i = 0; i < N; i++) cin>>graph[i];

    vector<position> P;
    for(int i = 0; i < N; i++) {
      for(int j = 0; j < N; j++) {
        if(graph[i][j] == PLAYER) P.push_back(position{i, j});
      }
    }

    queue<movement> Q;
    Q.push(movement{P[0], P[1], 0});

    int ans = -1;
    while(!Q.empty()) {
      movement m = Q.front();
      Q.pop();

      if(m.p1.r == m.p2.r && m.p1.c == m.p2.c) {
        ans = m.steps;
        break;
      }

      if(visited[m.p1.r][m.p1.c][m.p2.r][m.p2.c]) continue;
      visited[m.p1.r][m.p1.c][m.p2.r][m.p2.c] = 1;

      for(int k = 0; k < MOV; k++) {
        int nr1 = m.p1.r + dr[k];
        int nc1 = m.p1.c + dc[k];

        if(!isValid(nr1, nc1) || graph[nr1][nc1] == OBSTACLE) {
          nr1 = m.p1.r;
          nc1 = m.p1.c;
        }

        int nr2 = m.p2.r + dr[k];
        int nc2 = m.p2.c + dc[k];

        if(!isValid(nr2, nc2) || graph[nr2][nc2] == OBSTACLE) {
          nr2 = m.p2.r;
          nc2 = m.p2.c;
        }

        if(!visited[nr1][nc1][nr2][nc2]) {
          position p1 = position{nr1, nc1};
          position p2 = position{nr2, nc2};
          Q.push(movement{p1, p2, m.steps + 1});
        }
      }
    }

    cout<<ans<<endl;

    return 0;
}

