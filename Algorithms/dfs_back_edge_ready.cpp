/**
*  Generated by tpp tool
*  File: dfs_back_edge.cpp
*  Created: 21-10-2024 13:49:31
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int MAX = 1e5;

vector<int> graph[MAX];
bool visited[MAX];
int depth[MAX];

void dfs(int u, int parent) {
  visited[u] = 1;

  for(int v: graph[u]) {
    if(!visited[v]) {
        cout<<"Tree-Edge: "<<u<<" "<< v<<endl;
        depth[v] = depth[u] + 1;
        dfs(v, u);
    } else {
        // v cannot be the parent of u
        if(v == parent) continue;

        // v cannot be a descendant of u
        // when we see the back-edge for the second time
        if(depth[v] > depth[u]) continue;

        // v is an ancestor of u
        // u -> v is a back-edge
        cout<<"Back-Edge: "<<u<<" "<<v<<endl;
    }
  }
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    graph[0].push_back(2);
    graph[2].push_back(0);

    graph[0].push_back(4);
    graph[4].push_back(0);

    graph[0].push_back(5);
    graph[5].push_back(0);
    
    graph[1].push_back(4);
    graph[4].push_back(1);
    
    graph[1].push_back(5);
    graph[5].push_back(1);
    
    graph[2].push_back(3);
    graph[3].push_back(2);
    
    graph[2].push_back(4);
    graph[4].push_back(2);
    
    graph[4].push_back(5);
    graph[5].push_back(4);
    
    dfs(0, 0);

    return 0;
}

