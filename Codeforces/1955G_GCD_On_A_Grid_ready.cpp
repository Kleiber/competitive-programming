/**
*  Generated by tpp tool
*  File: 1955G_GCD_On_A_Grid.cpp
*  Created: 08-04-2024 22:00:43
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <numeric>
using namespace std;


const int MAX = 105;

int M[MAX][MAX];
int visited[MAX][MAX];
int R, C;
int maximum;

int dr[] = {0, 1};
int dc[] = {1, 0};

bool isValid(int r, int c) {
    return r >= 0 && r < R && c >= 0 && c < C;
}

void dfs(int r, int c, int divisor) {
    if(r == R - 1 && c == C - 1) {
      maximum = max(maximum, divisor);
    }

    visited[r][c] = divisor;

    for(int k = 0; k < 2; k++) {
        int nr = r + dr[k];
        int nc = c + dc[k];

        if(isValid(nr, nc) && visited[nr][nc] != divisor && M[nr][nc] % divisor == 0 && maximum < divisor) {
            dfs(nr, nc, divisor);
        }
    }
}

int gcd(int a, int b){
  if (b == 0) return a;
  return gcd(b, a % b);
}

int main() {
  // do not remove this code if you use cin or cout
  ios::sync_with_stdio(false);
  cin.tie(0);
  
  int t;
  cin>>t;
  
  while(t--) {
    cin>>R>>C;
      
    memset(visited, 0, sizeof(visited));
    
    for(int i = 0; i < R; i++) {
      for(int j = 0; j < C; j++) cin>>M[i][j];
    }
    
    maximum = 1;
    int maximumPossible = gcd(M[0][0], M[R - 1][C - 1]);

    for(int i = 1; i*i <= maximumPossible; i++) {
      if(maximumPossible % i == 0) {
        dfs(0, 0, i);
        dfs(0, 0, maximumPossible/i);
      }
    }
    
    cout<<maximum<<endl;
  }
}

