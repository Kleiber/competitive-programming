/**
*  Generated by tpp tool
*  File: 1950D_Product_Of_Binary_Decimals.cpp
*  Created: 19-04-2024 12:05:26
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const int MAX = 1e5;

set<int> S;

void dfs(int n) {
  if(n > MAX) return;
  
  S.insert(n);

  dfs(n*10);
  dfs(n*10 + 1);
}

bool isPossible(int n) {
  if(S.find(n) != S.end()) return 1;

  vector<int> V(S.begin(), S.end());
  int len = V.size();

  int i = 1;
  while(i < len  && n != 1) {
    if(n/V[i] > 0 && n % V[i] == 0) n = n/V[i];
    else i++;
  }

  return n == 1;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    dfs(1);

    int t;
    cin>>t;

    while(t--) {
      int n;
      cin>>n;

      if(isPossible(n)) cout<<"YES"<<endl;
      else cout<<"NO"<<endl;
    }

    return 0;
}

