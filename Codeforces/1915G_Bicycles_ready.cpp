/**
*  Generated by tpp tool
*  File: 1915G_Bicycles.cpp
*  Created: 28-12-2023 23:54:58
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MAX_SLOWNESS 1005

struct edge {
  int v;
  int w;
};

struct node {
  int u;
  int slowness;
  long long int time;
};


class MyComparator {
  public:
    int operator() (const node& n1, const node& n2) {
      return n1.time > n2.time;
    }
};

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int t;
    cin>>t;

    while(t--) {
      int n, m;
      cin>>n>>m;

      vector<vector<edge>> graph(n);
      vector<int> slowness(n);

      for(int i = 0; i < m; i++) {
        int u, v, w;
        cin>>u>>v>>w;

        graph[u - 1].push_back(edge{v - 1, w});
        graph[v - 1].push_back(edge{u - 1, w});
      }

      for(int i = 0; i < n; i++) cin>>slowness[i];


      bool visited[n][MAX_SLOWNESS];
      memset(visited, 0, sizeof(visited));

      priority_queue<node, vector<node>, MyComparator> Q;

      // node{initial_node, initial_slowness, total_initial_time}
      Q.push(node{0, MAX_SLOWNESS, 0});

      long long int ans = 0;
      while(!Q.empty()) {
        node nd = Q.top();
        Q.pop();

        int cur_slowness = min(nd.slowness, slowness[nd.u]);

        if(visited[nd.u][cur_slowness]) continue;
        visited[nd.u][cur_slowness] = 1;

        if(nd.u == n - 1) {
          ans = nd.time;
          break;
        }

        for(int i = 0; i < graph[nd.u].size(); i++) {
          int v = graph[nd.u][i].v;
          int w = graph[nd.u][i].w;

          if(!visited[v][cur_slowness]) {
            long long int time = w * cur_slowness;
            Q.push(node{v, cur_slowness, nd.time + time});
          }
        }
      }

      cout<<ans<<endl;
    }

    return 0;
}

