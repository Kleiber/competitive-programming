/**
*  Generated by tpp tool
*  File: 1927D_Find_The_Different_Ones.cpp
*  Created: 06-02-2024 22:45:02
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MAX 200005
#define MIN_INT 1000005
#define MAX_INT 0 

struct vertex {
  int maxi;
  int mini;
  int ind_mini;
  int ind_maxi;
};

int A[MAX];
vertex tree[4*MAX];

vertex mergeVertex(vertex v1, vertex v2) {
  // Minimum
  int mini;
  int ind_mini;
  if(v1.mini < v2.mini) {
    mini = v1.mini;
    ind_mini = v1.ind_mini;
  } else {
    mini = v2.mini;
    ind_mini = v2.ind_mini;
  }

  // Maximum
  int maxi;
  int ind_maxi;
  if(v1.maxi > v2.maxi) {
    maxi = v1.maxi;
    ind_maxi = v1.ind_maxi;
  } else {
    maxi = v2.maxi;
    ind_maxi = v2.ind_maxi;
  }

  return vertex{maxi, mini, ind_mini, ind_maxi};
}

void build(int node, int L, int R) {
  if(L == R) tree[node] = vertex{A[L], A[L], L + 1, L + 1};
  else {
    build(2*node, L, (L + R)/2);
    build(2*node + 1, (L + R)/2 + 1, R);

    tree[node] = mergeVertex(tree[2*node], tree[2*node + 1]);
  }
}

vertex query(int node, int L, int R, int l, int r) {
  if(L > r || R < l) return vertex{MAX_INT, MIN_INT, 0, 0};

  if(L >= l && R <= r) return tree[node];

  vertex left = query(2*node, L, (L + R)/2, l, r);
  vertex right = query(2*node + 1, (L + R)/2 + 1, R, l, r);

  return mergeVertex(left, right);
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int cases;
    cin>>cases;

    for(int i = 0; i < cases; i++) {
      if(i != 0) cout<<endl;

      int n;
      cin>>n;

      for(int k = 0; k < n; k++) cin>>A[k];

      build(1, 0, n - 1);

      int q;
      cin>>q;

      for(int k = 0; k < q; k++) {
        int l, r;
        cin>>l>>r;

        vertex ans = query(1, 0, n - 1,l - 1, r - 1);

        if(ans.mini == ans.maxi) cout<<-1<<" "<<-1<<endl;
        else cout<<ans.ind_mini<<" "<<ans.ind_maxi<<endl;
      }
    }

    return 0;
}

