/**
*  Generated by tpp tool
*  File: 1969C_Minimizing_The_Sum.cpp
*  Created: 29-04-2024 13:03:34
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


const long long int INF = 1e18 + 5;
const int N = 3e5 + 50;
const int K = 10 + 5;

// dp[i][j] is the minimum sum of the first i elements using j operations
long long int A[N], dp[N][K];

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int t;
    cin>>t;

    while(t--) {
      int n, k;
      cin>>n>>k;

      for(int i = 0; i < n ;i++) cin>>A[i];


      for(int i = 0; i < n + 50; i++) {
        for(int j = 0; j < k + 5; j++) dp[i][j] = INF;
      }

      dp[0][0] = 0;

      for(int i = 0; i < n; i++) {
        for(int j = 0; j <= k; j++) {
          long long int minimum = A[i];

          for(int op = 0; op  + j <= k; op++) {
            minimum = min(minimum, A[i + op]);
            dp[i + (op + 1)][j + op] = min(dp[i + (op + 1)][j + op], dp[i][j] + (op + 1)*minimum);
          }
        }
      }

      long long int ans = INF;
      for(int j = 0 ; j <= k; j++) ans = min(ans, dp[n][j]);

      cout<<ans<<endl;
    }

    return 0;
}

