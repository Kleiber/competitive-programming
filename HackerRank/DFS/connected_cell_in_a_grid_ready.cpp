/**
*  Generated by tpp tool
*  File: connected_cell_in_a_grid.cpp
*  Created: 31-12-2023 19:02:47
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MOV 8
#define MAX 10

int R, C;
int graph[MAX][MAX];
bool visited[MAX][MAX];

int dc[] = {1, 1, 0, -1,-1,-1, 0, 1};
int dr[] = {0, 1, 1, 1, 0, -1,-1,-1};

bool isValid(int r, int c) {
  return r >= 0 && r < R && c >= 0 && c < C;
}

int dfs(int r, int c) {
  visited[r][c] = 1;

  int cont = 1;
  for(int k = 0; k < MOV; k++) {
    int nr = r + dr[k];
    int nc = c + dc[k];

    if(isValid(nr,nc) && !visited[nr][nc] && graph[nr][nc] == 1) {
      cont += dfs(nr, nc);
    }
  }

  return cont;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    memset(graph, 0, sizeof(graph));
    memset(visited, 0, sizeof(visited));

    cin>>R>>C;

    for(int i = 0; i < R; i++) {
      for(int j = 0; j < C; j++) {
        cin>>graph[i][j];
      }
    }

    int ans = 0;
    for(int i = 0; i < R; i++) {
      for(int j = 0; j < C; j++) {
        if(!visited[i][j] && graph[i][j] == 1) {
          ans = max(ans, dfs(i, j));
        }
      }
    }

    cout<<ans<<endl;

    return 0;
}

