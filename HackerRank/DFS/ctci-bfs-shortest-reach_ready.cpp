/**
*  Generated by tpp tool
*  File: ctci-bfs-shortest-reach.cpp
*  Created: 01-01-2024 16:39:02
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


struct node {
  int id;
  int depth;
};

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int queries, n, m, start;
    cin>>queries;

    while(queries--) {
      cin>>n>>m;

      vector<vector<int>> graph(n);
      vector<bool> visited(n, 0);
      vector<int> depths(n, -1);

      for(int i = 0; i < m; i++) {
        int u, v;
        cin>>u>>v;

        graph[u - 1].push_back(v - 1);
        graph[v - 1].push_back(u - 1);
      }

      cin>>start;
      start = start - 1;

      //BFS
      queue<node> Q;
      Q.push(node{start, 0});
      visited[start] = 1;

      while(!Q.empty()) {
        node u = Q.front();
        Q.pop();

        if(u.id != start) depths[u.id] = u.depth;

        for(int i = 0; i < graph[u.id].size(); i++) {
          int v = graph[u.id][i];
          if(!visited[v]) {
            visited[v] = 1;
            Q.push(node{v, u.depth + 1});
          }
        }
      }

      int cont = 0;
      for(int i = 0; i < depths.size(); i++) {
        if(i == start) continue;

        if(cont != 0) cout<<" ";
        cont++;

        if(depths[i] > 0) depths[i] = 6 * depths[i];
        cout<<depths[i];
      }
      cout<<endl;
    }

    return 0;
}

