/**
*  Generated by tpp tool
*  File: MAKEMAZE.cpp
*  Created: 31-12-2023 20:47:21
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define WALL '#'
#define SPACE '.'
#define MOV 4

int dr[] = {0, 1, 0, -1};
int dc[] = {1, 0, -1, 0};

struct node {
  int row;
  int col;

  bool operator==(const node &n) const{
    return make_pair(row, col) == make_pair(n.row, n.col);
  }
};

bool isBoundary(int r, int c, int R, int C){
  return r == 0 || c == 0 || r == R - 1 || c == C - 1;
}

bool isValid(int r, int c, int R, int C) {
  return r >= 0 && r < R && c >= 0 && c < C;
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    int cases;
    cin>>cases;

    while(cases--) {
      int R, C;
      cin>>R>>C;

      vector<string> graph(R);
      vector<vector<bool>> visited(R, vector<bool>(C,0));

      for(int i = 0; i < R; i++) cin>>graph[i];

      vector<node> entries; 
      for(int i = 0; i < R; i++) {
        for(int j = 0; j < C; j++) {
          if(graph[i][j] == SPACE && isBoundary(i, j, R, C)) {
            entries.push_back(node{i, j});
          }
        }
      }

      bool isValidMaze = 0;
      if(entries.size() == 2) {
        node start = entries[0];
        node end = entries[1];

        queue<node> Q;
        Q.push(start);
        visited[start.row][start.col] = 1;

        while(!Q.empty()) {
          node u = Q.front();
          Q.pop();

          if(u == end) {
            isValidMaze = 1;
            break;
          }

          for(int k = 0; k < MOV; k++) {
            int nr = u.row + dr[k];
            int nc = u.col + dc[k];

            if(isValid(nr, nc, R, C) && graph[nr][nc] == SPACE && !visited[nr][nc]) {
              Q.push(node{nr, nc});
              visited[nr][nc] = 1;
            }
          }
        }
      }

      if(isValidMaze) cout<<"valid"<<endl;
      else cout<<"invalid"<<endl;
    }

    return 0;
}

