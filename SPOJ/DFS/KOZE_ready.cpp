/**
*  Generated by tpp tool
*  File: KOZE.cpp
*  Created: 05-01-2024 16:53:25
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MOV 4
#define SHEEP 'k'
#define WOLF 'v'
#define FENCE '#'

int dr[] = {0, 1, 0, -1};
int dc[] = {1, 0, -1, 0};

int R, C;
int totalSheeps, totalWolfs, sheeps, wolfs;
vector<string> graph;
vector<vector<bool>> visited;

bool isValid(int r, int c) {
  return r >= 0 && r < R && c >= 0 && c < C;
}

void dfs(int r, int c) {
  if(visited[r][c]) return;

  visited[r][c] = 1;

  if(graph[r][c] == SHEEP) sheeps++;
  if(graph[r][c] == WOLF) wolfs++;

  for(int k = 0; k < MOV; k++) {
    int nr = r + dr[k];
    int nc = c + dc[k];

    if(isValid(nr, nc) && graph[nr][nc] != FENCE) {
      dfs(nr, nc);
    }
  }
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cin>>R>>C;

    graph = vector<string>(R);
    visited = vector<vector<bool>>(R, vector<bool>(C, 0));
    totalSheeps = totalWolfs = 0;

    for(int i = 0; i < R; i++) cin>>graph[i];

    for(int i = 0; i < R; i++) {
      for(int j = 0; j < C; j++) {
        if(graph[i][j] == SHEEP) totalSheeps++;
        if(graph[i][j] == WOLF) totalWolfs++;
      }
    }

    for(int i = 0; i < R; i++) {
      for(int j = 0; j < C; j++) {
        if(graph[i][j] != FENCE && !visited[i][j]) {
          sheeps = wolfs = 0;

          dfs(i, j);

          if(sheeps > wolfs) totalWolfs -= wolfs;
          else totalSheeps -= sheeps;
        }
      }
    }

    cout<<totalSheeps<<" "<<totalWolfs<<endl;

    return 0;
}

