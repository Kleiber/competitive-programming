/**
*  Generated by tpp tool
*  File: ABCPATH.cpp
*  Created: 31-12-2023 19:36:33
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


#define MOV 8

int R, C;
int cases, ans;
vector<string> graph;
vector<vector<bool>> visited;

int dr[] = {0, 1, 1, 1, 0, -1,-1,-1};
int dc[] = {1, 1, 0, -1,-1,-1, 0, 1};

bool isValid(int r, int c) {
  return r >= 0 && r < R && c >= 0 && c < C;
}

bool isNextLetter(int nr, int nc, int r, int c) {
  return graph[nr][nc] - graph[r][c] == 1;
}

void dfs(int r, int c, int len) {
  if(visited[r][c]) return;

  visited[r][c] = 1;
  ans = max(ans, len);

  for(int k = 0; k < MOV; k++) {
    int nr = r + dr[k];
    int nc = c + dc[k];

    if(isValid(nr, nc) && isNextLetter(nr, nc, r, c)) {
      dfs(nr, nc, len + 1);
    }
  }
}

int main() {
    // do not remove this code if you use cin or cout
    ios::sync_with_stdio(false);
    cin.tie(0);

    cases = 1;
    ans = 0;

    while(cin>>R>>C) {
      if(R == 0 && C == 0) break;

      graph = vector<string>(R);
      visited = vector<vector<bool>>(R, vector<bool>(C, 0));

      for(int i = 0; i < R; i++) cin>>graph[i];

      for(int i = 0; i < R; i++) {
        for(int j = 0; j < C; j++) {
          if(graph[i][j] == 'A' && !visited[i][j]) {
            dfs(i, j, 1);
          }
        }
      }

      cout<<"Case "<<cases++<<": "<<ans<<endl;
      ans = 0;
    }

    return 0;
}

