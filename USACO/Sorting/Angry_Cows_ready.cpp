/**
*  Generated by tpp tool
*  File: Angry_Cows.cpp
*  Created: 14-02-2024 10:00:44
**/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <bitset>
#include <sstream>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;


int N;
vector<int> bales;

bool isValid(int r) {
  return r >= 0 && r < N;
}

int getExploded(int start, int dir) {
	int radius = 1;
	int prev = start;

	while(1) {
		int next = prev;
		while(isValid(next + dir) && abs(bales[next + dir] - bales[prev]) <= radius) {
			next = next + dir;
		}

		if (next == prev) break;

		prev = next;
		radius++;
	}

	return abs(prev - start);
}

int main() {
  // do not remove this code if you use cin or cout
  ios::sync_with_stdio(false);
  cin.tie(0);

	freopen("angry.in", "r", stdin);
	freopen("angry.out", "w", stdout);

	cin>>N;
	
  bales = vector<int>(N);
	for (int i = 0; i < N; i++) cin>>bales[i];

	sort(bales.begin(), bales.end());

	int ans = 0;
	for (int i = 0; i < N; i++) {
		ans = max(ans, 1 + getExploded(i, -1) + getExploded(i, 1));
	}

	cout<<ans<<endl;
  return 0;
}

